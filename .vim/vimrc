source $VIMRUNTIME/defaults.vim

function! PackInit() abort
  packadd minpac

  call minpac#init()
  " call minpac#add('fatih/vim-go', {'rev': 'v*'})
  call minpac#add('ElmCast/elm-vim')
  call minpac#add('cespare/vim-toml')
  call minpac#add('chr4/nginx.vim')
  call minpac#add('dense-analysis/ale')
  call minpac#add('guns/vim-sexp')
  call minpac#add('junegunn/fzf.vim')
  call minpac#add('junegunn/goyo.vim')
  call minpac#add('junegunn/limelight.vim')
  call minpac#add('k-takata/minpac', {'type': 'opt'})
  call minpac#add('lepture/vim-jinja')
  call minpac#add('majutsushi/tagbar')
  call minpac#add('morhetz/gruvbox', {'type': 'opt'})
  call minpac#add('pearofducks/ansible-vim')
  call minpac#add('racer-rust/vim-racer')
  call minpac#add('rodjek/vim-puppet')
  call minpac#add('rust-lang/rust.vim')
  call minpac#add('supercollider/scvim')
  call minpac#add('tmux-plugins/vim-tmux')
  call minpac#add('tpope/vim-classpath')
  call minpac#add('tpope/vim-commentary')
  call minpac#add('tpope/vim-dadbod')
  call minpac#add('tpope/vim-dispatch')
  call minpac#add('tpope/vim-eunuch')
  call minpac#add('tpope/vim-fireplace')
  call minpac#add('tpope/vim-fugitive')
  call minpac#add('tpope/vim-projectionist')
  call minpac#add('tpope/vim-repeat')
  call minpac#add('tpope/vim-rhubarb')
  call minpac#add('tpope/vim-salve')
  call minpac#add('tpope/vim-scriptease')
  call minpac#add('tpope/vim-sensible')
  call minpac#add('tpope/vim-sexp-mappings-for-regular-people')
  call minpac#add('tpope/vim-surround')
  call minpac#add('tpope/vim-unimpaired')
  call minpac#add('tpope/vim-vinegar')
  call minpac#add('venantius/vim-cljfmt')
  call minpac#add('vim-ruby/vim-ruby')
endfunction

command! PackUpdate call PackInit() | call minpac#update()
command! PackClean  call PackInit() | call minpac#clean()
command! PackStatus packadd minpac  | call minpac#status()

set runtimepath+=/opt/homebrew/opt/fzf  " managed by brew istead of minpac

if exists('$TMUX')
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
else
  " Defined by iterm2
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
endif

let &t_TI = "\<Esc>[>4;2m"
let &t_TE = "\<Esc>[>4;m"

set termguicolors
let g:gruvbox_italic = 1
colorscheme gruvbox   " i quickly tried onedark, but quickly came back to gruvbox
set guifont=JetBrains\ Mono:h15
set printfont=JetBrains\ Mono:h8
set printoptions=left:10mm,top:10mm,right:10mm,bottom:10mm
" Make true color work also in tmux.
" Those variables are filled automatically only when $TERM=xterm.
" But in tmux, $TERM=screen so we have to set them manually.
" See :help xterm-true-color
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set hlsearch
set ignorecase
set smartcase

set cursorline
set showtabline=2
set linebreak

if !has('nvim')
  set ttymouse=xterm2  " enable dragging inside tmux
endif

set number
set listchars=tab:▸\ ,eol:¬,trail:⍽,space:␣

let mytmpdir = $HOME . "/tmp/vim"
if !isdirectory(mytmpdir)
    call mkdir(mytmpdir, "p", 0o700)
endif
let &backupdir=mytmpdir
let &directory=mytmpdir
let &undodir=mytmpdir
set backup
if has('persistent_undo')
  set undofile
endif

set nofoldenable

let mapleader=","

set statusline=%<%f\ %y%w%q%m%r\ %k%=[%{&fileencoding}\ %{&fileformat}]\ 0x%B\ \ %l,%c%V\ %o\ %O\ %P

nnoremap <C-p> :<C-u>FZF<CR>


nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let g:ale_fix_on_save = 1

let g:ale_fixers = {
  \   '*': ['trim_whitespace', 'remove_trailing_lines']
  \}
